alias currentPID S0;
currentPID=(PTBR-1024)/8;
alias currentPCB S1;
currentPCB=READY_LIST + 32 * currentPID;
[currentPCB+1]=1;
[currentPCB+2]=BP;
[currentPCB+3]=SP-1;
alias physicalSP S2;
physicalSP=[PTBR+2*(SP/512)]*512+(SP%512);
[currentPCB+4]=[physicalSP];
[currentPCB+5]=PTBR;
[currentPCB+6]=PTLR;
[currentPCB+7]=R0;
[currentPCB+8]=R1;
[currentPCB+9]=R2;
[currentPCB+10]=R3;
[currentPCB+11]=R4;
[currentPCB+12]=R5;
[currentPCB+13]=R6;
[currentPCB+14]=R7;


//round robin algorithm
//alias newPCB S3;
//if(currentPID==0) then
  //   newPCB=1568;
     
//else 
//	newPCB=1536;
//endif;

//alias newPID S3;
//alias newPCB S4;
//newPID=0;
//newPCB=1536;
//while (currentPID<31) do
  //if([currentPCB+33]==1) then
    //     newPID=currentPID+1;
      //   newPCB=currentPCB+32;
        // break;
  // endif;
   //currentPID=currentPID+1;
   //currentPCB=currentPCB+32;
//endwhile;
//if(newPID==32) then
  //if([READY_LIST+1]==1) then
    //newPID=0;
    //newPCB=1536;
//endif; 
//endif;
alias newPCB S3;
S4=currentPID;
S5=0;
alias checkpcb S6;
while(S5<32)do
	checkpcb=READY_LIST+32*((S4+1)%32);
	if([checkpcb+1]==1)then
		newPCB=checkpcb;
		break;
	else
		S4=S4+1;
		S5=S5+1;
	endif;
endwhile;

[newPCB+1]=2;
BP=[newPCB+2];
SP=[newPCB+3];

PTBR=[newPCB+5];
PTLR=[newPCB+6];
R0=[newPCB+7];
R1=[newPCB+8];
R2=[newPCB+9];
R3=[newPCB+10];
R4=[newPCB+11];
R5=[newPCB+12];
R6=[newPCB+13];
R7=[newPCB+14];
SP=SP+1;
alias newphysicalSP S7;
newphysicalSP=[PTBR+2*(SP/512)]*512+(SP%512);
[newphysicalSP]=[newPCB+4];
//breakpoint;
ireturn;

